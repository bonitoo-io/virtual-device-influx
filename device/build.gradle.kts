/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

dependencies {

    implementation("io.netty:netty-common:4.1.93.Final") // {

    // influxdb2-client
    // implementation("com.influxdb:influxdb-client-java:6.7.0")
    // influxdb3-client
    implementation("com.influxdb:influxdb3-java:0.3.0")

    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.1.1-jre")

    implementation("io.bonitoo.qa:virtual-device:0.1-SNAPSHOT"){
        // N.B. this version of io.netty is needed by HiveMQ, which
        // writes to an MQTT Broker.  For this project, which seeks to
        // write directly to Influx, the MQTT Broker is not needed.
        // However, HiveMQ scopes this version into the project at runtime
        // and replaces the later version (4.1.93.Final), which is the one
        // needed by influx3 client.  The earlier version is missing some used methods.
        exclude("io.netty", "netty-buffer")
        exclude("io.netty", "netty-codec")
        exclude("io.netty", "netty-common")
        exclude("io.netty", "netty-handler")
        exclude("io.netty", "netty-transport")
        exclude("io.netty", "netty-codec-http")
        exclude("io.netty", "netty-handler-proxy")
        exclude("io.netty", "netty-transport-native-epoll")
    }

    compileOnly("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")

    testCompileOnly("org.projectlombok:lombok:1.18.28")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.28")


}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("io.bonitoo.virtual.device.influx.IFluxDevice")
    applicationDefaultJvmArgs = listOf("--add-opens",
            "java.base/java.nio=ALL-UNNAMED",
            "-Dmessage=\"ahoj z konfigu\"",
            "-Ddefault.ttl=41000")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    jvmArgs("--add-opens","java.base/java.nio=ALL-UNNAMED")
}

tasks.register<Jar>("encryptJar"){
    dependsOn.addAll(listOf("compileJava"))
    archiveFileName.set("encryptTool.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes(mapOf("Main-Class" to "io.bonitoo.virtual.device.influx.TokenHelper")) } // Provided we set it up in the application plugin configuration
    val sourcesMain = sourceSets.main.get()
    val contents = configurations.runtimeClasspath.get()
            .map { if (it.isDirectory) it else zipTree(it)} +
            sourcesMain.output
    from(contents)
}
